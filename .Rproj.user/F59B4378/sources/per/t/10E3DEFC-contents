
# ------------------------------------------ #
# ---------- UPLOAD AUDIO TO GCS ----------- #
# ------------------------------------------ #
upload_audio_to_gcs <- function(destination_bucket, audio_directory, language) {
  
  audio_folders <- list.files(audio_directory)
  
  for (audio_folder in audio_folders) {

    # Get the current audio path
    path.current.audio <- list.files(paste(audio_directory, audio_folder, sep = ''))[1]
    current.audio_directory <- paste(audio_directory, paste0(audio_folder, collapse = '', sep = '/'), sep = '')
    current.file <-  paste(current.audio_directory, path.current.audio, sep = '')


    # ---- Inferencial metadata ---- #
    
    # Get speech context if exist
    # fileName <- sprintf('%s/context.txt', current.audio_directory)
    # text <- readChar(fileName, file.info(fileName)$size)
    # if ( length(text) > 1 ) {
    #   context <- text
    # } else {
    #   context <- NULL
    # }

    # Extract audio duration in second
    current.command <- sprintf("ffmpeg -i %s 2>&1 | grep Duration | awk '{print $2}' | tr -d ,", current.file)
    res.command <- try(system(command = current.command, intern = TRUE))
    duration <- lubridate::period_to_seconds(lubridate::hms(res.command))

    # Add metadata to the current object
    object.name <- tolower(path.current.audio)
    meta.list <- list(duration_in_sec = duration, audio_name = audio_folder)
    meta <- gcs_metadata_object(object_name = object.name, contentLanguage = language, metadata = meta.list )

    # Upload audio into gcs
    gcs_upload( bucket = destination_bucket, file = current.file, name = object.name, object_metadata = meta)

  }

  return( cat('# Upload finished.') )

}
